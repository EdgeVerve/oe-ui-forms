{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# lazy-component\nThe lazy component is used to dynamically fetch the component from the url and set the model data to it.",
      "summary": "",
      "path": "lazy-component.js",
      "properties": [
        {
          "name": "url",
          "type": "string | null | undefined",
          "description": "url for the file to import",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_setUrl\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Data to be set on the element once imported",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "emitOnSave",
          "type": "string | null | undefined",
          "description": "Event to be emitted when content is saved on the element.\nThis property is forwarded into the element as 'emit-on-save'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_emitOnSaveChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "auto",
          "type": "boolean | null | undefined",
          "description": "Automatically load the element when the component is attached to the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "elementName",
          "type": "string | null | undefined",
          "description": "Name of the element to be created , if element definition is not exported by the component file.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_setUrl",
          "description": "If the url is updated , the component loads the element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 92,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newUrl",
              "type": "string"
            },
            {
              "name": "oldUrl",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "modelChanged",
          "description": "When content of the binded model is changed , forwards the change to the element loaded",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 2
            },
            "end": {
              "line": 114,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changed",
              "type": "Object",
              "description": "model change details"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_emitOnSaveChanged",
          "description": "Forwards the property 'emitOnSave' to the element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "oldVal",
              "type": "string"
            },
            {
              "name": "newVal",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_registerEvent",
          "description": "Registers a element and adds listener on the 'model' of the property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 150,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "Element loaded from the URL."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_loadElement",
          "description": "Imports the element and loads the element into the DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 212,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "newRecord",
          "description": "Merges defaultVM of the form with the passed parameter and sets it on the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overrideObj",
              "type": "Object",
              "description": "data to override on defaultVM"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/demo-meta-polymer.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 225,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "lazyComponent",
      "attributes": [
        {
          "name": "url",
          "description": "url for the file to import",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "model",
          "description": "Data to be set on the element once imported",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "emit-on-save",
          "description": "Event to be emitted when content is saved on the element.\nThis property is forwarded into the element as 'emit-on-save'",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "auto",
          "description": "Automatically load the element when the component is attached to the DOM.",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "element-name",
          "description": "Name of the element to be created , if element definition is not exported by the component file.",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "model-changed",
          "description": "Fired when the `model` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "lazy-component"
    },
    {
      "description": "# oe-async-validator\n`oe-async-validator` validates fields on the bound `model` on the server based on the provided `requesturl`.",
      "summary": "",
      "path": "validators/oe-async-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "Array of the field ids",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model object of the fields",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "requesturl",
          "type": "string | null | undefined",
          "description": "Url to verify the validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "ensure",
          "type": "string | null | undefined",
          "description": "String denoting whether the value should be 'present' or 'absent' in the response\nof the url call.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"present\""
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "Error message to display when the validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Async validation failed.\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Once attached to dom sets up ajax component to perform validations and registers the validator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 130,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Custom validation to check presence or absence of the value based on ajax request",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 156,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 157,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeAsyncValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "Array of the field ids",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model object of the fields",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "requesturl",
          "description": "Url to verify the validation",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "ensure",
          "description": "String denoting whether the value should be 'present' or 'absent' in the response\nof the url call.",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "error",
          "description": "Error message to display when the validation fails",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-async-validator",
      "mixins": [
        "OECommonMixin"
      ]
    },
    {
      "description": "# oe-block-validator\nProvides a validation section to validate a subset of fields on form\n\n```\n<oe-block-validator>\n    <oe-vbox>\n        <paper-input label=\"First Name\"></paper-input>\n        <paper-input label=\"Last Name\"></paper-input>\n        <paper-input label=\"City\"></paper-input>\n        <paper-input label=\"Zip Code\"></paper-input>\n    </oe-vbox>\n<oe-block-validator>\n```",
      "summary": "",
      "path": "validators/oe-block-validator.js",
      "properties": [
        {
          "name": "fieldControls",
          "type": "Object | null | undefined",
          "description": "Maintains the  list of controls for a given model property\ne.g.\n{\n    prop1 : [ctrl1, ctrl2],\n    prop3 : [ctrl3]\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 40,
              "column": 16
            },
            "end": {
              "line": 45,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_validators",
          "type": "Array | null | undefined",
          "description": "Array of cross-field validators",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 50,
              "column": 16
            },
            "end": {
              "line": 52,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "validators",
          "type": "Object | null | undefined",
          "description": "Object hash of cross-field validators\ne.g.\n {\n   \"fieldId\" : [validators-voting-for-this-field]\n }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 61,
              "column": 16
            },
            "end": {
              "line": 66,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "errors",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 68,
              "column": 16
            },
            "end": {
              "line": 73,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]",
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 3
            },
            "end": {
              "line": 47,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 3
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Fields are invalid\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "validateForm",
          "description": "Validates each of the registered oe field components and returns a Promise",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 100,
              "column": 8
            },
            "end": {
              "line": 144,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Promise that resolves to give {valid:Boolean,message:String,control:HTMLElement}"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onOEValidate",
          "description": "Calls custom validators attached to the form component",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 150,
              "column": 8
            },
            "end": {
              "line": 191,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onRegisterField",
          "description": "Registers a oe-ui component as a field in form",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "clearFieldErrors",
          "description": "Clears the error of the components related to a fieldId",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 217,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fieldId",
              "type": "string"
            },
            {
              "name": "errType",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onRegisterValidator",
          "description": "Registers a oe validator to the form",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 269,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onFieldError",
          "description": "Registers a field error inside the form",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 275,
              "column": 8
            },
            "end": {
              "line": 303,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onFieldOk",
          "description": "Registers a field validation to be success to clear the related errors",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 309,
              "column": 8
            },
            "end": {
              "line": 337,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onValidatorError",
          "description": "Registers a error from oe-validators",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 379,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_onValidatorOk",
          "description": "Registers a validators validation to be success to clear related errors",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 385,
              "column": 8
            },
            "end": {
              "line": 404,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_clearError",
          "description": "Clear the error in related controls",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 410,
              "column": 8
            },
            "end": {
              "line": 416,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "error",
              "type": "Object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_showAnyOtherError",
          "description": "Displays all errors in controls",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 421,
              "column": 8
            },
            "end": {
              "line": 432,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "_clearAllErrors",
          "description": "Clears all errors in the form",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 438,
              "column": 8
            },
            "end": {
              "line": 452,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 1
            },
            "end": {
              "line": 84,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 1
            },
            "end": {
              "line": 99,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 29,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeBlockValidator",
      "attributes": [
        {
          "name": "field-controls",
          "description": "Maintains the  list of controls for a given model property\ne.g.\n{\n    prop1 : [ctrl1, ctrl2],\n    prop3 : [ctrl3]\n}",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 40,
              "column": 16
            },
            "end": {
              "line": 45,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "validators",
          "description": "Object hash of cross-field validators\ne.g.\n {\n   \"fieldId\" : [validators-voting-for-this-field]\n }",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 61,
              "column": 16
            },
            "end": {
              "line": 66,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "errors",
          "description": "",
          "sourceRange": {
            "file": "../../oe-mixins/form-mixins/oe-form-validation-mixin.js",
            "start": {
              "line": 68,
              "column": 16
            },
            "end": {
              "line": 73,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFormValidationMixin"
        },
        {
          "name": "fields",
          "description": "fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 3
            },
            "end": {
              "line": 47,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 3
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-block-validator",
      "mixins": [
        "OECommonMixin",
        "OEFormValidationMixin"
      ]
    },
    {
      "description": "# oe-combination-validator\n`oe-combination-validator` evaluates fields on the bound `model` and ensures the combination is one of the defined `combinations`.",
      "summary": "",
      "path": "validators/oe-combination-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "combinations",
          "type": "Array | null | undefined",
          "description": "array of valid combinations.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "ensure",
          "type": "string | null | undefined",
          "description": "String denoting to check if combination should exist",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"present\""
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 87,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Invalid Combination\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "isEquivalent",
          "description": "Checks if two javascript objects are equivalent. Only top level properties are checked for equivalence.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 169,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeCombinationValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "combinations",
          "description": "array of valid combinations.",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "ensure",
          "description": "String denoting to check if combination should exist",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 87,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-validator-error",
          "description": "Fired when validation fails",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-validator-ok",
          "description": "Fired when validation succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-validator",
          "description": "Fired when validator is attached",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-combination-validator",
      "mixins": [
        "OECommonMixin"
      ]
    },
    {
      "description": "# oe-eq-validator\n`oe-eq-validator` evaluates values of two fields on the bound `model` to make sure they are equal/same.",
      "summary": "",
      "path": "validators/oe-eq-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Values do not match\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 101,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 102,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeEqValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-validator-error",
          "description": "Fired when validation fails",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-validator-ok",
          "description": "Fired when validation succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-validator",
          "description": "Fired when validator is attached",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-eq-validator",
      "mixins": [
        "OECommonMixin"
      ]
    },
    {
      "description": "# oe-expression-validator\n`oe-expression-validator` evaluates an `expression` on the bound `model` to decide the model validity.",
      "summary": "",
      "path": "validators/oe-expression-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "expression",
          "type": "string | null | undefined",
          "description": "validation expression",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Invalid Combination\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 111,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeExpressionValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "expression",
          "description": "validation expression",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-validator-error",
          "description": "Fired when validation fails",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-validator-ok",
          "description": "Fired when validation succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-validator",
          "description": "Fired when validator is attached",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-expression-validator",
      "mixins": [
        "OECommonMixin"
      ]
    },
    {
      "description": "# oe-le-validator\n`oe-le-validator` evaluates values of two fields on the bound `model` to make sure value of first field (fields[0]) is less-than-or-equal-to the second field (fields[1]).",
      "summary": "",
      "path": "validators/oe-le-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Value in to field must not be lesser than value in from field\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeLeValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-validator-error",
          "description": "Fired when validation fails",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-validator-ok",
          "description": "Fired when validation succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-validator",
          "description": "Fired when validator is attached",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-le-validator",
      "mixins": [
        "OECommonMixin"
      ]
    },
    {
      "description": "# oe-lt-validator\n`oe-lt-validator` evaluates values of two fields on the bound `model` to make sure value of first field (fields[0]) is less-than second field (fields[1]).",
      "summary": "",
      "path": "validators/oe-lt-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Value in to field must not be lesser than value in from field\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 100,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 101,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeLtValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-validator-error",
          "description": "Fired when validation fails",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-validator-ok",
          "description": "Fired when validation succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-validator",
          "description": "Fired when validator is attached",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-lt-validator",
      "mixins": [
        "OECommonMixin"
      ]
    },
    {
      "description": "# oe-ne-validator\n`oe-ne-validator` evaluates values of two fields on the bound `model` to make sure they are *not* same.",
      "summary": "",
      "path": "validators/oe-ne-validator.js",
      "properties": [
        {
          "name": "fields",
          "type": "Array | null | undefined",
          "description": "Fields that would participate in validation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Model on which expression will be evaluated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "error",
          "type": "string | null | undefined",
          "description": "error message/code to raise when validation fails",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Values are same\""
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Performs validation and triggers appropriate validation event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 2
            },
            "end": {
              "line": 103,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 104,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "oeNeValidator",
      "attributes": [
        {
          "name": "fields",
          "description": "Fields that would participate in validation",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "model",
          "description": "Model on which expression will be evaluated",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error",
          "description": "error message/code to raise when validation fails",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-validator-error",
          "description": "Fired when validation fails",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-validator-ok",
          "description": "Fired when validation succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-validator",
          "description": "Fired when validator is attached",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-ne-validator",
      "mixins": [
        "OECommonMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "MetaMixin to store meta data of the generated element",
      "summary": "",
      "path": "meta-polymer.js",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 8
            },
            "end": {
              "line": 364,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 308,
          "column": 0
        },
        "end": {
          "line": 366,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "MetaMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "meta-polymer.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1472,
          "column": 24
        },
        "end": {
          "line": 1500,
          "column": 9
        }
      },
      "privacy": "public",
      "name": "tempClass"
    }
  ]
}
